{"ast":null,"code":"var _jsxFileName = \"/Users/issoufzabre/workspace/father-project/src/components/comments/Comments.js\",\n    _s = $RefreshSig$();\n\n// import { useState, useEffect } from 'react';\n// import { useParams } from 'react-router';\n// import classes from './Comments.module.css';\n// import NewCommentForm from './NewCommentForm';\n// import useHttp from '../../hooks/use-http';\n// import { getAllComments } from '../../lib/api';\n// import LoadingSpinner from '../UI/LoadingSpinner';\n// import CommentsList from './CommentsList'\n// const Comments = () => {\n//   const [isAddingComment, setIsAddingComment] = useState(false);\n//   const params =  useParams();\n//   const { quoteId } = params\n//   const {sendRequest, status, data: loadedComments} = useHttp(getAllComments);\n//   useEffect(() => {\n//     sendRequest(quoteId)\n//   }, [quoteId, sendRequest]);\n//   const startAddCommentHandler = () => {\n//     setIsAddingComment(true);\n//   };\n//   const addedCommentHandler = () => {};\n//   let comments;\n//   if(status === 'pending') {\n//     comments = (\n//       <div className='centered'>\n//         <LoadingSpinner />\n//       </div>\n//     );\n//   }\n//   if(status === 'completed' && loadedComments && loadedComments.length > 0) {\n//     comments = <CommentsList comments= {loadedComments}/>\n//   }\n//   if(status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n//     comments = <p className='centered'>No comments added yet!</p>\n//   }\n//   return (\n//     <section className={classes.comments}>\n//       <h2>User Comments</h2>\n//       {!isAddingComment && (\n//         <button className='btn' onClick={startAddCommentHandler}>\n//           Add a Comment\n//         </button>\n//       )}\n//       {isAddingComment &&( \n//         <NewCommentForm\n//          quoteId={useParams.quoteId}\n//          onAddedComment={addedCommentHandler}\n//          />)}\n//       {comments}\n//     </section>\n//   );\n// };\n// export default Comments;\nimport { useRef, useEffect } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewCommentForm = props => {\n  _s();\n\n  const commentTextRef = useRef();\n  const {\n    sendRequest,\n    status,\n    error\n  } = useHttp(addComment);\n  const {\n    onAddedComment\n  } = props;\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = event => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value; // optional: Could validate here\n\n    sendRequest({\n      commentData: {\n        text: enteredText\n      },\n      quoteId: props.quoteId\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: submitFormHandler,\n    children: [status === 'pending' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      onSubmit: submitFormHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"comment\",\n        children: \"Your Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"comment\",\n        rows: \"5\",\n        ref: commentTextRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        children: \"Add Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewCommentForm, \"Y8R0MHs/XMPV/v7mhEjkbp1RDZA=\", false, function () {\n  return [useHttp];\n});\n\n_c = NewCommentForm;\nexport default NewCommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewCommentForm\");","map":{"version":3,"sources":["/Users/issoufzabre/workspace/father-project/src/components/comments/Comments.js"],"names":["useRef","useEffect","useHttp","addComment","LoadingSpinner","classes","NewCommentForm","props","commentTextRef","sendRequest","status","error","onAddedComment","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","form","control","actions"],"mappings":";;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AAEA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,OAAP,MAAoB,6BAApB;;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AAChC,QAAMC,cAAc,GAAGR,MAAM,EAA7B;AAEA,QAAM;AAAES,IAAAA,WAAF;AAAeC,IAAAA,MAAf;AAAuBC,IAAAA;AAAvB,MAAiCT,OAAO,CAACC,UAAD,CAA9C;AAEA,QAAM;AAAES,IAAAA;AAAF,MAAqBL,KAA3B;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,MAAM,KAAK,WAAX,IAA0B,CAACC,KAA/B,EAAsC;AACpCC,MAAAA,cAAc;AACf;AACF,GAJQ,EAIN,CAACF,MAAD,EAASC,KAAT,EAAgBC,cAAhB,CAJM,CAAT;;AAMA,QAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACnCA,IAAAA,KAAK,CAACC,cAAN;AAEA,UAAMC,WAAW,GAAGR,cAAc,CAACS,OAAf,CAAuBC,KAA3C,CAHmC,CAKnC;;AAEAT,IAAAA,WAAW,CAAC;AAAEU,MAAAA,WAAW,EAAE;AAAEC,QAAAA,IAAI,EAAEJ;AAAR,OAAf;AAAsCK,MAAAA,OAAO,EAAEd,KAAK,CAACc;AAArD,KAAD,CAAX;AACD,GARD;;AAUA,sBACE;AAAM,IAAA,SAAS,EAAEhB,OAAO,CAACiB,IAAzB;AAA+B,IAAA,QAAQ,EAAET,iBAAzC;AAAA,eACGH,MAAM,KAAK,SAAX,iBACC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFJ,eAME;AAAK,MAAA,SAAS,EAAEL,OAAO,CAACkB,OAAxB;AAAiC,MAAA,QAAQ,EAAEV,iBAA3C;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAU,QAAA,EAAE,EAAC,SAAb;AAAuB,QAAA,IAAI,EAAC,GAA5B;AAAgC,QAAA,GAAG,EAAEL;AAArC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,eAUE;AAAK,MAAA,SAAS,EAAEH,OAAO,CAACmB,OAAxB;AAAA,6BACE;AAAQ,QAAA,SAAS,EAAC,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAvCD;;GAAMlB,c;UAGmCJ,O;;;KAHnCI,c;AAyCN,eAAeA,cAAf","sourcesContent":["// import { useState, useEffect } from 'react';\n// import { useParams } from 'react-router';\n\n// import classes from './Comments.module.css';\n// import NewCommentForm from './NewCommentForm';\n// import useHttp from '../../hooks/use-http';\n// import { getAllComments } from '../../lib/api';\n// import LoadingSpinner from '../UI/LoadingSpinner';\n// import CommentsList from './CommentsList'\n\n// const Comments = () => {\n//   const [isAddingComment, setIsAddingComment] = useState(false);\n//   const params =  useParams();\n\n//   const { quoteId } = params\n\n\n//   const {sendRequest, status, data: loadedComments} = useHttp(getAllComments);\n\n//   useEffect(() => {\n//     sendRequest(quoteId)\n//   }, [quoteId, sendRequest]);\n\n//   const startAddCommentHandler = () => {\n//     setIsAddingComment(true);\n//   };\n  \n\n//   const addedCommentHandler = () => {};\n//   let comments;\n//   if(status === 'pending') {\n//     comments = (\n//       <div className='centered'>\n//         <LoadingSpinner />\n//       </div>\n//     );\n//   }\n\n//   if(status === 'completed' && loadedComments && loadedComments.length > 0) {\n//     comments = <CommentsList comments= {loadedComments}/>\n//   }\n//   if(status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n//     comments = <p className='centered'>No comments added yet!</p>\n//   }\n\n//   return (\n//     <section className={classes.comments}>\n//       <h2>User Comments</h2>\n//       {!isAddingComment && (\n//         <button className='btn' onClick={startAddCommentHandler}>\n//           Add a Comment\n//         </button>\n//       )}\n//       {isAddingComment &&( \n//         <NewCommentForm\n//          quoteId={useParams.quoteId}\n//          onAddedComment={addedCommentHandler}\n//          />)}\n//       {comments}\n//     </section>\n//   );\n// };\n\n// export default Comments;\n\n\nimport { useRef, useEffect } from 'react';\n\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;"]},"metadata":{},"sourceType":"module"}